name: Shared Integration Workflow

on:
  workflow_call:
    inputs:
      language:
        required: true
        type: string
      repo-url:
        required: true
        type: string
      commit-sha:
        required: true
        type: string

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Clone calling repo
        shell: bash
        run: |
          git clone https://github.com/${{ inputs.repo-url }} sdk
          cd sdk
          git checkout ${{ inputs.commit-sha }}

      - name: Setup Node.js
        if: inputs.language == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://npm.pkg.github.com'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create .npmrc
        if: inputs.language == 'javascript'
        shell: bash
        run: |
          echo "@trustification:registry=https://npm.pkg.github.com" >> .npmrc

      - name: Setup Java
        if: inputs.language == 'java'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Build CLI
        id: build
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd sdk
          if [[ "${{ inputs.language }}" == "javascript" ]]; then
            npm ci
            npm run compile
            PKG=$(npm pack)
            mv "$PKG" ../cli.tgz
          elif [[ "${{ inputs.language }}" == "java" ]]; then
            ./mvnw package -DskipTests
            cp target/*-cli.jar ../cli.jar
          fi

      - name: Set Artifact Name
        id: set-output
        shell: bash
        run: |
          echo "name=cli-${{ inputs.language }}" >> $GITHUB_OUTPUT

      - name: Upload JavaScript Artifact
        uses: actions/upload-artifact@v4
        if: inputs.language == 'javascript'
        with:
          name: cli-${{ inputs.language }}
          path: cli.tgz

      - name: Upload Java Artifact
        uses: actions/upload-artifact@v4
        if: inputs.language == 'java'
        with:
          name: cli-${{ inputs.language }}
          path: cli.jar

  integration-tests:
    needs: run-tests
    runs-on: ${{ matrix.os }}
    env:
      EXHORT_DEV_MODE: true
      PYTHONIOENCODING: utf-8
      PYTHONUNBUFFERED: 1
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        runtime:
          - maven
          - gradle-groovy
          - gradle-kotlin
          - npm
          - yarn-classic
          - yarn-berry
          - pnpm
          - go-1.21
          - go-latest
          - python-3.10-pip
          - python-3.12-pip
          - syft

    steps:
      - name: Configure Git for Windows paths
        if: runner.os == 'Windows'
        run: |
          git config --global core.protectNTFS false
          git config --global core.quotepath false

      - name: Set Windows Console Encoding
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          chcp 65001

      - uses: actions/checkout@v4

      - name: Checkout integration tests repo
        uses: actions/checkout@v4
        with:
          repository: trustification/exhort-integration-tests
          ref: main
          path: integration-tests
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Built Artifact
        uses: actions/download-artifact@v4
        with:
          name: cli-${{ inputs.language }}
          path: integration-tests/artifact

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          check-latest: true

      - name: Setup Python 3.10
        if: matrix.runtime == 'python-3.10-pip'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          check-latest: true

      - name: Install Python 3.10 dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml
      
      - name: Install python-pip dependencies
        if: matrix.runtime == 'python-3.10-pip' || matrix.runtime == 'python-3.12-pip'
        run: |
          pip install requests==2.31.0 numpy==1.26.4 pandas==2.2.2

      - name: Run Integration Tests - No Runtime
        shell: bash
        working-directory: integration-tests
        run: |
          set -x
          python -u shared-scripts/run_tests_no_runtime.py ${{ inputs.language }} artifact ${{ matrix.runtime }}

      - name: Setup Java for Cli execution
        if: inputs.language == 'java'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Runtimes
        shell: bash
        working-directory: integration-tests
        run: ./shared-scripts/setup-runtime.sh ${{ matrix.runtime }}

      - name: Print Runtimes
        shell: bash
        working-directory: integration-tests
        run: ./shared-scripts/print-runtime.sh

      - name: Run Integration Tests
        shell: bash
        working-directory: integration-tests
        run: |
          set -x
          python -u shared-scripts/run_tests.py ${{ inputs.language }} artifact ${{ matrix.runtime }}
